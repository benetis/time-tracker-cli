{"version":3,"sources":["../../src/core/output.js"],"names":["sumarize","search","tasks","rate","full","format","table","head","colAligns","chars","top","bottom","left","right","style","total","forEach","task","index","description","name","duration","getSeconds","splitWidth","str","len","arr","length","push","substring","join","getStartDate","rowSpan","content","red","vAlign","console","log","toString","outputConfig","config","Object","keys","map","e","outputVertical","args","table2","key","splice","cliError","err","error","cliSuccess","green","markdown","expanded","body","filtered","timings","subtotal","times","secs","timing","start","stop","getEndDate"],"mappings":"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","file":"output.js","sourcesContent":["import moment from 'moment';\nimport Table from 'cli-table2';\nimport colors from 'colors';\n\nimport { humanParseDiff, calcRate, getSeconds } from './utils';\n\nexport const sumarize = function(search, tasks, rate, full, format) {\n    let table = new Table({\n        head: ['Name', 'Description', 'Dates', 'Duration'],\n        colAligns: ['left', 'center', 'center', 'left'],\n        chars: {\n            top: '═',\n            'top-mid': '╤',\n            'top-left': '╔',\n            'top-right': '╗',\n            bottom: '═',\n            'bottom-mid': '╧',\n            'bottom-left': '╚',\n            'bottom-right': '╝',\n            left: '║',\n            'left-mid': '╟',\n            right: '║',\n            'right-mid': '╢'\n        },\n        style: { head: ['green'] }\n    });\n    let total = 0;\n    let head = `Search: ${search} \\n`;\n\n    tasks.forEach((task, index) => {\n        let description =\n            task.task.description() && task.task.description() !== ''\n                ? task.task.description()\n                : '-';\n        let name = task.name;\n        task = task.task;\n\n        let duration = task.getSeconds();\n        total += duration;\n\n        // Avoid excesive width for proper console fit\n        let splitWidth = (str, len) => {\n            let arr = [];\n            while (str != '') {\n                if (str.length > len) {\n                    arr.push(str.substring(0, len));\n                    str = str.substring(len);\n                } else {\n                    arr.push(str);\n                    break;\n                }\n            }\n            return arr.join('\\n');\n        };\n        description = splitWidth(description, 51);\n        name = splitWidth(name, 40);\n\n        table.push([\n            name,\n            description,\n            moment(task.getStartDate()).format(format),\n            humanParseDiff(duration)\n        ]);\n    });\n\n    if (full) {\n        table.push([]);\n\n        if (rate) {\n            table.push(\n                [\n                    {\n                        rowSpan: 2,\n                        content: `${colors.red('Search:')} \"${search}\"`,\n                        vAlign: 'center'\n                    },\n                    colors.red('Total time'),\n                    humanParseDiff(total)\n                ],\n                [colors.red('Rate'), calcRate(rate, total)]\n            );\n        } else {\n            table.push(\n                [\n                    {\n                        rowSpan: 2,\n                        content: `${colors.red('Search:')} \"${search}\"`,\n                        vAlign: 'center'\n                    },\n                    { rowSpan: 2, content: '', vAlign: 'center' },\n                    { rowSpan: 2, content: colors.red('Total time'), vAlign: 'center' },\n                    { rowSpan: 2, content: humanParseDiff(total), vAlign: 'center' }\n                ],\n                []\n            );\n        }\n    }\n\n    console.log(table.toString());\n};\n\nexport const outputConfig = function(config) {\n    let table = new Table({\n        head: ['Key', 'value'],\n        chars: {\n            top: '═',\n            'top-mid': '╤',\n            'top-left': '╔',\n            'top-right': '╗',\n            bottom: '═',\n            'bottom-mid': '╧',\n            'bottom-left': '╚',\n            'bottom-right': '╝',\n            left: '║',\n            'left-mid': '╟',\n            right: '║',\n            'right-mid': '╢'\n        },\n        colAligns: ['center', 'center'],\n        style: { head: ['green'] }\n    });\n\n    Object.keys(config).map(e => table.push([e, config[e]]));\n\n    console.log(table.toString());\n};\n\nexport const outputVertical = function(...args) {\n    let table2 = new Table();\n    let key = args.splice(0, 1);\n    table2.push({ [key]: args });\n\n    return table2.toString();\n};\n\nexport const cliError = function(err) {\n    console.error(colors.red(`Error: ${err}`));\n};\n\nexport const cliSuccess = function(err) {\n    console.log(colors.green(err));\n};\n\nexport const markdown = function(tasks, expanded = false) {\n    let body = '| Start | End | Hours | Subtotal | Description |\\n';\n    body += '| ----- | --- | -----:| -------: | ----------- |\\n';\n    let total = 0;\n\n    //tasks = start || end ? this.filterDates(tasks, start, end) : tasks;\n    tasks.forEach(task => {\n        let name = task.name;\n        task = task.task;\n\n        if (!task.filtered) {\n            let duration = task.getSeconds();\n            total += duration;\n\n            if (expanded && task.task.timings.length > 1) {\n                let subtotal = 0;\n                let times = 0;\n\n                task.task.timings.forEach(timing => {\n                    let secs = getSeconds(timing);\n                    subtotal += secs;\n                    times += 1;\n                    body +=\n                        `|${moment(timing.start).format('YYYY/MM/DD kk:mm')}` +\n                        `|${moment(timing.stop).format('YYYY/MM/DD kk:mm')}` +\n                        `|${humanParseDiff(secs)}` +\n                        `|${humanParseDiff(subtotal)}` +\n                        `|${name} (part ${times})` +\n                        `|\\n`;\n                });\n            } else {\n                let start = task.getStartDate();\n                let stop = task.getEndDate();\n\n                body +=\n                    `|${moment(start).format('YYYY/MM/DD kk:mm')}` +\n                    `|${moment(stop).format('YYYY/MM/DD kk:mm')}` +\n                    `|${humanParseDiff(duration)}` +\n                    `|${humanParseDiff(total)}` +\n                    `|${name}` +\n                    `|\\n`;\n            }\n        }\n    });\n    body += '| | | |\\n';\n    body += `| Total | | ${humanParseDiff(total)} | | |\\n`;\n\n    return body;\n};\n"]}