{"version":3,"sources":["../../src/core/output.js"],"names":["sumarize","search","tasks","rate","full","format","table","head","colAligns","chars","style","total","forEach","task","index","description","name","duration","getSeconds","splitWidth","str","len","arr","length","push","substring","join","getStartDate","rowSpan","content","red","vAlign","console","log","toString","outputConfig","config","Object","keys","map","e","outputVertical","args","table2","key","splice","cliError","err","error","cliSuccess","green"],"mappings":"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","file":"output.js","sourcesContent":["import moment from 'moment'\nimport Table from 'cli-table2'\nimport colors from 'colors'\n\nimport { humanParseDiff, calcRate } from './utils'\n\nexport const sumarize = function(search, tasks, rate, full, format) {\n    let table = new Table({\n        head: ['Name','Description', 'Dates', 'Duration'],\n        colAligns: ['left', 'center', 'center', 'left'],\n        chars: {\n            'top': '═'\n            , 'top-mid': '╤'\n            , 'top-left': '╔'\n            , 'top-right': '╗'\n            , 'bottom': '═'\n            , 'bottom-mid': '╧'\n            , 'bottom-left': '╚'\n            , 'bottom-right': '╝'\n            , 'left': '║'\n            , 'left-mid': '╟'\n            , 'right': '║'\n            , 'right-mid': '╢'\n          },\n        style: { head: ['green'] }\n    });\n    let total = 0\n    let head= `Search: ${search} \\n`\n\n    tasks.forEach((task, index) => {\n\t\tlet description = (task.task.description() && task.task.description() !== '')\n\t\t? task.task.description()\n\t\t: '-'\n        let name = task.name\n        task = task.task\n\n        let duration = task.getSeconds()\n        total += duration\n\n        // Avoid excesive width for proper console fit\n        let splitWidth = (str, len) => {\n            let arr = []\n            while (str != '') {\n                if (str.length > len) {\n                    arr.push(str.substring(0,len))\n                    str = str.substring(len);\n                } else {\n                    arr.push(str)\n                    break\n                }\n            }\n            return arr.join('\\n')\n        }\n        description = splitWidth(description, 51)\n        name = splitWidth(name, 40)\n\n        table.push([name, description, moment(task.getStartDate()).format(format), humanParseDiff(duration)])\n    })\n\n    if (full){\n        table.push([])\n\n        if (rate){\n            table.push(\n                [{ rowSpan:2, content: `${colors.red('Search:')} \"${search}\"`, vAlign:'center'}, colors.red('Total time'), humanParseDiff(total)],\n                [ colors.red('Rate'), calcRate(rate, total)]\n            )\n        } else {\n            table.push(\n                [\n                    { rowSpan:2, content: `${colors.red('Search:')} \"${search}\"`, vAlign:'center' },\n                    { rowSpan:2, content: '', vAlign:'center' },\n                    { rowSpan:2, content: colors.red('Total time'), vAlign:'center' },\n                    { rowSpan:2, content: humanParseDiff(total), vAlign:'center' }\n                ],\n                []\n            )\n        }\n    }\n\n    console.log(table.toString());\n}\n\nexport const outputConfig = function (config){\n    let table = new Table({\n        head: ['Key', 'value'],\n        chars: {\n            'top': '═'\n            , 'top-mid': '╤'\n            , 'top-left': '╔'\n            , 'top-right': '╗'\n            , 'bottom': '═'\n            , 'bottom-mid': '╧'\n            , 'bottom-left': '╚'\n            , 'bottom-right': '╝'\n            , 'left': '║'\n            , 'left-mid': '╟'\n            , 'right': '║'\n            , 'right-mid': '╢'\n        },\n        colAligns: ['center', 'center'],\n        style: { head: ['green'] }\n    });\n\n    Object.keys(config).map(e => table.push([e, config[e]]))\n\n    console.log(table.toString());\n}\n\nexport const outputVertical = function (...args){\n    let table2 = new Table()\n        let key = args.splice(0, 1)\n        table2.push(\n            { [key]: args },\n        )\n\n        return table2.toString()\n}\n\nexport const cliError = function(err) {\n    console.error(colors.red(`Error: ${err}`))\n}\n\nexport const cliSuccess = function(err) {\n    console.log(colors.green(err))\n}\n"]}